// SPDX-License-Identifier: MIT

// Huffplugs erc721 contract
// source code: https://github.com/webtresclub/huffplug
// Mint on Mainnet: https://www.buttpluggy.com/
// Contract: https://etherscan.io/address/0x0000420538cd5abfbc7db219b6a1d125f5892ab0
// https://opensea.io/collection/buttpluggy

/*
  ▄▀  ██      ▄▄▄▄▄       ███   ██   ██▄           
▄▀    █ █    █     ▀▄     █  █  █ █  █  █          
█ ▀▄  █▄▄█ ▄  ▀▀▀▀▄       █ ▀ ▄ █▄▄█ █   █         
█   █ █  █  ▀▄▄▄▄▀        █  ▄▀ █  █ █  █          
 ███     █                ███      █ ███▀          
        █                         █                
       ▀                         ▀                 
   ▄   ▄████     ▄▄▄▄▀       ▄▀  ████▄ ████▄ ██▄   
    █  █▀   ▀ ▀▀▀ █        ▄▀    █   █ █   █ █  █  
██   █ █▀▀        █        █ ▀▄  █   █ █   █ █   █ 
█ █  █ █         █         █   █ ▀████ ▀████ █  █  
█  █ █  █       ▀           ███              ███▀  
█   ██   ▀                                         
                    UwU                                  
*/


#include "./Plugger.huff"
#include "./Metadata.huff"

#include "./ERC721.huff"

// @dev Owner pattern is only use to gain access to the Opensea collection admin 
//      functions and admin tokens url
#include "./Owned.huff"

// @dev Usage LOG_STACK_1(0x00), LOG_STACK_2(0x00), ..., etc
// #include "Huff-Console/Console.huff"


// *************************************************************
// ***                    Interfaces                         ***
// *************************************************************

#define function mint(uint256) nonpayable returns ()
#define function mintWithMerkle(bytes32[]) nonpayable returns ()
#define function claimed(address) view returns (bool)
#define function totalSupply() view returns (uint256)
#define function currentDifficulty() view returns (uint256)
#define function totalMinted() view returns (uint256)
#define function salt() view returns (bytes32)
#define function contractURI() view returns (string)
#define function owner() view returns (address)
#define function getUri() nonpayable returns (string)

// access control, onlyAdmin
#define function setUri(string) nonpayable returns ()
#define function setContractUri(string) nonpayable returns ()

#define error ErrNonPayable()
#define constant ERR_NONPAYABLE = 0x77c8d2bd


// *************************************************************
// ***                      Macros                           ***
// *************************************************************


#define macro TOTAL_MINTED() = takes (0) returns (0) {
    [MINTED_STORAGE_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro TOTAL_SUPPLY() = takes (0) returns (0) {
    [MAX_SUPPLY] 0x00 mstore
    0x20 0x00 return
}

#define macro NAME() = takes (0) {
    0x0a
    0x20
    dup1 0x00 mstore                      // [name_length, name_value]
    mstore                                // [name_value]
    __RIGHTPAD(0x42757474706c75676779)    // Buttpluggy
    0x40 mstore                           // []
    0x60 0x00 return
}

#define macro SYMBOL() = takes (0) {
    0x03                 // 3, UwU
    0x20                 // 0x20, 3, UwU
    dup1 0x00 mstore     
    mstore               
    __RIGHTPAD(0x557755) 0x40 mstore          
    0x60 0x00 return
}

// *************************************************************
// ***                   Constructor                         ***
// *************************************************************

#define macro CONSTRUCTOR() = takes (0) returns (0) {
    OWNED_CONSTRUCTOR()

    PLUGGER_CONSTRUCTOR()
}


// *************************************************************
// ***               Function dispatcher                     ***
// *************************************************************

#define macro MAIN() = takes (0) returns (0) {
    callvalue iszero                               // [msg.value == 0]
    REQUIRE_CUSTOM_ERROR_LONG(ERR_NONPAYABLE)      // []

    0x00 calldataload 0xE0 shr  // [sig]

    dup1 __FUNC_SIG(mint)                       eq mint jumpi
    dup1 __FUNC_SIG(mintWithMerkle)             eq mintWithMerkle jumpi

    dup1 __FUNC_SIG(transferFrom)               eq transferFrom jumpi
    dup1 __FUNC_SIG(safeTransferFrom)           eq safeTransferFrom jumpi

    dup1 __FUNC_SIG(approve)                    eq approve jumpi
    dup1 __FUNC_SIG(setApprovalForAll)          eq setApprovalForAll jumpi

    dup1 __FUNC_SIG(name)                       eq name jumpi
    dup1 __FUNC_SIG(symbol)                     eq symbol jumpi
    dup1 __FUNC_SIG(supportsInterface)          eq supportsInterface jumpi
    
    dup1 __FUNC_SIG(tokenURI)                   eq tokenURI jumpi
    dup1 __FUNC_SIG(contractURI)                eq contractURI jumpi

    dup1 __FUNC_SIG(getApproved)                eq getApproved jumpi
    dup1 __FUNC_SIG(isApprovedForAll)           eq isApprovedForAll jumpi

    dup1 __FUNC_SIG(balanceOf)                  eq balanceOf jumpi
    dup1 __FUNC_SIG(ownerOf)                    eq ownerOf jumpi

    dup1 __FUNC_SIG("safeTransferFrom(address,address,uint256,bytes)") eq safeTransferFromData jumpi

    /// @dev owner pattern dispatcher
    dup1 __FUNC_SIG(setOwner)                   eq set_owner jumpi
    dup1 __FUNC_SIG(owner)                      eq owner jumpi
    
    dup1 __FUNC_SIG(setUri)                     eq setUri jumpi
    dup1 __FUNC_SIG(setContractUri)             eq setContractUri jumpi
    

    dup1 __FUNC_SIG(totalSupply)                eq totalSupply jumpi
    dup1 __FUNC_SIG(totalMinted)                eq totalMinted jumpi

    dup1 __FUNC_SIG(claimed)                    eq claimed jumpi    
    dup1 __FUNC_SIG(salt)                       eq salt jumpi
    // last one doesnt need dup1
    __FUNC_SIG(currentDifficulty)               eq currentDifficulty jumpi


    // Revert on failed dispatch
    invalid

    totalSupply:
        TOTAL_SUPPLY()

    totalMinted:
        TOTAL_MINTED()

    mint:
        MINT()
    
    mintWithMerkle:
        MINT_WITH_MERKLE()

    currentDifficulty:
        // imported from Plugger.huff
        GET_DIFFICULTY()
    
    salt:
        // imported from Plugger.huff
        GET_SALT()
    
    claimed:
        // imported from Plugger.huff
        GET_CLAIMED()

    approve:
        APPROVE()
    setApprovalForAll:
        SET_APPROVAL_FOR_ALL()

    transferFrom:
        TRANSFER_FROM()
    safeTransferFrom:
        SAFE_TRANSFER_FROM()
    safeTransferFromData:
        SAFE_TRANSFER_FROM_WITH_DATA()

    name:
        NAME()
    symbol:
        SYMBOL()
    supportsInterface:
        SUPPORTS_INTERFACE()

    getApproved:
        GET_APPROVED()
    isApprovedForAll:
        IS_APPROVED_FOR_ALL()

    balanceOf:
        BALANCE_OF()
    ownerOf:
        OWNER_OF()

    tokenURI:
        TOKEN_URI_METADATA()
    contractURI:
        CONTRACT_URI_METADATA()

    setUri:
        // Check that the caller is authorized
        IS_OWNER()
        SET_STRING(URI_POINTER)

    setContractUri:
        // Check that the caller is authorized
        IS_OWNER()
        SET_STRING(CONTRACTURI_POINTER)

    set_owner:
        // Check that the caller is authorized
        IS_OWNER()
        SET_OWNER()
    owner:
        OWNER()

}
