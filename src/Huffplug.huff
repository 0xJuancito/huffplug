#include "huffmate/tokens/ERC721.huff"
#include "huffmate/auth/Owned.huff"

#include "huffmate/utils/Errors.huff"

// @dev Usage LOG_STACK_1(0x00), LOG_STACK_2(0x00), ..., etc
#include "Huff-Console/Console.huff"


// *************************************************************
// ***                    Constants                          ***
// *************************************************************

#define constant TOKEN_RENDERER = 0x0000000000000000000000000000000000000000000000000000000000000000
// @dev contract that allows users to mint Buttpluggys
#define constant MINTER =         0x0000000000000000000000000000000000000000000000000000000000000000


// *************************************************************
// ***                    Interfaces                         ***
// *************************************************************

#define function plug(address, uint256) payable returns ()
#define function totalSupply() view returns (uint256)

// *************************************************************
// ***                      Macros                           ***
// *************************************************************

// "INVALID_TOKEN_ID"
#define constant INVALID_TOKEN_ID_ERROR = 0x494e56414c49445f544f4b454e5f494400000000000000000000000000000000
// length = 16
#define constant INVALID_TOKEN_ID_LENGTH = 0x10

/// @notice Checks if the tokenId is in interval [1, 1024]
#define macro VALID_TOKEN_ID() = takes (1) returns (1) {
    [INVALID_TOKEN_ID_ERROR]   // ["INVALID_TOKEN_ID"]
    [INVALID_TOKEN_ID_LENGTH]  // [10 (length), "INVALID_TOKEN_ID"]
    dup3                       // [tokenId, INVALID_TOKEN_ID_LENGTH, "INVALID_TOKEN_ID", tokenId]
    0x0401                     // [1024, tokenId, INVALID_TOKEN_ID_LENGTH, "INVALID_TOKEN_ID", tokenId]
    gt

    dup4 iszero not            // [tokenId != 0 , tokenId < 1025, INVALID_TOKEN_ID_LENGTH, "INVALID_TOKEN_ID", tokenId]
    and                        // [tokenId != 0 && tokenId < 1025, INVALID_TOKEN_ID_LENGTH, "INVALID_TOKEN_ID", tokenId]

    REQUIRE()                  // []
}

// "ONLY_MINTER"
#define constant ONLY_MINTER_ERROR = 0x4f4e4c595f4d494e544552000000000000000000000000000000000000000000
// length = 11
#define constant ONLY_MINTER_LENGTH = 0x0b

/// @notice Reverts with an "ONLY_MINTER" msg.sender is not the minter
#define macro ONLY_MINTER() = takes (0) returns (0) {
    [ONLY_MINTER_ERROR]              // ["ONLY_MINTER"]
    [ONLY_MINTER_LENGTH]             // [10 (length), "ONLY_MINTER"]
    caller [MINTER] eq
    REQUIRE()                       // []
}


#define macro MINT() = takes (0) returns (0) {
    ONLY_MINTER()
    
    0x24 calldataload       // [tokenId]
    VALID_TOKEN_ID()        // [tokenId]
    0x04 calldataload       // [to, tokenId]
    _MINT()
    stop
}

#define macro TOTAL_SUPPLY() = takes (0) returns (0) {
    0x0400 0x00 mstore
    0x20 0x00 return
}

#define macro NAME() = takes (0) {
    NON_PAYABLE()                               // []
    0x42757474706c7567677900000000000000000000000000000000000000000000 // Buttpluggy
    0x0a
    0x20 0x00 mstore                            // [name_length, name_value]
    0x20 mstore                                 // [name_value]
    0x40 mstore                                 // []
    0x60 0x00 return
}

#define macro TOKEN_URI() = takes (0) {
    // __FUNC_SIG(tokenURI) 
    0xc87b56dd 0xE0 shl
    0x00 mstore                // tokenURI SIG

    0x04 calldataload          // [tokenId]
    0x04 mstore                //

    0x60                    // [retSize]
    0x00                    // [retOffset, retSize]
    0x24                  // [argSize, retOffset, retSize]
    0x00                    // [argOffset, argSize, retOffset, retSize]
    [TOKEN_RENDERER]        // [to, argOffset, argSize, retOffset, retSize]
    gas                // [gas, to, argOffset, argSize, retOffset, retSize]
    staticcall              // [success]

    // Revert if call is unsuccessful
    cont jumpi
    0x00 dup1 revert
    cont:

    // Load the result
    0x60 0x00 return
}

#define macro SYMBOL() = takes (0) {
    NON_PAYABLE()                               // []
    0x5577550000000000000000000000000000000000000000000000000000000000 // UwU
    0x03
    0x20 0x00 mstore                            // [symbol_length, symbol_value]
    0x20 mstore                                 // [symbol_value]
    0x40 mstore                                 // []
    0x60 0x00 return
}

// *************************************************************
// ***                   Constructor                         ***
// *************************************************************

#define macro CONSTRUCTOR() = takes (0) returns (0) {
    OWNED_CONSTRUCTOR()
}


// *************************************************************
// ***               Function dispatcher                     ***
// *************************************************************

#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr  // [sig]

    // Mint Functions
    dup1 __FUNC_SIG(plug)                       eq mint jumpi

    dup1 __FUNC_SIG(approve)                    eq approve jumpi
    dup1 __FUNC_SIG(setApprovalForAll)          eq setApprovalForAll jumpi

    dup1 __FUNC_SIG(transferFrom)               eq transferFrom jumpi
    dup1 __FUNC_SIG(safeTransferFrom)           eq safeTransferFrom jumpi

    dup1 __FUNC_SIG(name)                       eq name jumpi
    dup1 __FUNC_SIG(symbol)                     eq symbol jumpi
    dup1 __FUNC_SIG(tokenURI)                   eq tokenURI jumpi
    dup1 __FUNC_SIG(supportsInterface)          eq supportsInterface jumpi

    dup1 __FUNC_SIG(getApproved)                eq getApproved jumpi
    dup1 __FUNC_SIG(isApprovedForAll)           eq isApprovedForAll jumpi

    dup1 __FUNC_SIG(balanceOf)                  eq balanceOf jumpi
    dup1 __FUNC_SIG(ownerOf)                    eq ownerOf jumpi

    dup1 __FUNC_SIG("safeTransferFrom(address,address,uint256,bytes)") eq safeTransferFromData jumpi

    dup1 __FUNC_SIG(totalSupply)                    eq totalSupply jumpi

    // owned functions dispatcher
    OWNED_MAIN()

    // Revert on failed dispatch
    0x00 dup1 revert

    totalSupply:
        TOTAL_SUPPLY()

    mint:
        MINT()

    approve:
        APPROVE()
    setApprovalForAll:
        SET_APPROVAL_FOR_ALL()

    transferFrom:
        TRANSFER_FROM()
    safeTransferFrom:
        SAFE_TRANSFER_FROM()
    safeTransferFromData:
        SAFE_TRANSFER_FROM_WITH_DATA()

    name:
        NAME()
    symbol:
        SYMBOL()
    tokenURI:
        TOKEN_URI()
    supportsInterface:
        SUPPORTS_INTERFACE()

    getApproved:
        GET_APPROVED()
    isApprovedForAll:
        IS_APPROVED_FOR_ALL()

    balanceOf:
        BALANCE_OF()
    ownerOf:
        OWNER_OF()
}