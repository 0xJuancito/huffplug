#include "huffmate/tokens/ERC721.huff"
//#include "Huff-Console/Console.huff"

#define constant TOKEN_RENDERER = 0x0000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f

#define function mint(address, uint256) payable returns ()

// armar el contract uri
// validacion de que solo el minter pueda mintear
// owner transferible 
// solo el minter puede mintear
// arreglar el token uri, por el momento es uno fijo 

#define constant MINTER = 0x0000000000000000000000000000000000000000000000000000000000000000 // contrato
#define constant OWNER = 0x0000000000000000000000000000000000000000000000000000000000000000 // multisig

#define macro MINT() = takes (0) returns (0) { 
    0x24 calldataload       // [tokenId]
    0x04 calldataload       // [to, tokenId]
    _MINT()
    stop
}


#define macro NAME() = takes (0) {
    NON_PAYABLE()                               // []
    0x42757474706c7567677900000000000000000000000000000000000000000000 // Buttpluggy
    0x0a
    0x20 0x00 mstore                            // [name_length, name_value]
    0x20 mstore                                 // [name_value]
    0x40 mstore                                 // []
    0x60 0x00 return
}

#define macro TOKEN_URI() = takes (0) {
    // __FUNC_SIG(tokenURI) 
    0xc87b56dd 0xE0 shl
    0x00 mstore                // tokenURI SIG

    0x04 calldataload          // [tokenId]
    0x04 mstore                //

    0x60                    // [retSize]
    0x00                    // [retOffset, retSize]
    0x24                  // [argSize, retOffset, retSize]
    0x00                    // [argOffset, argSize, retOffset, retSize]
    [TOKEN_RENDERER]        // [to, argOffset, argSize, retOffset, retSize]
    gas                // [gas, to, argOffset, argSize, retOffset, retSize]
    staticcall              // [success]

    // Revert if call is unsuccessful
    cont jumpi
    0x00 dup1 revert
    cont:

    // Load the result
    0x60 0x00 return
}

#define macro SYMBOL() = takes (0) {
    NON_PAYABLE()                               // []
    0x5577550000000000000000000000000000000000000000000000000000000000 // UwU
    0x03
    0x20 0x00 mstore                            // [symbol_length, symbol_value]
    0x20 mstore                                 // [symbol_value]
    0x40 mstore                                 // []
    0x60 0x00 return
}

// Function Dispatch
#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr  // [sig]

    // Mint Functions
    dup1 __FUNC_SIG(mint)                       eq mint_jump jumpi

    dup1 __FUNC_SIG(approve)                    eq approve jumpi
    dup1 __FUNC_SIG(setApprovalForAll)          eq setApprovalForAll jumpi

    dup1 __FUNC_SIG(transferFrom)               eq transferFrom jumpi
    dup1 __FUNC_SIG(safeTransferFrom)           eq safeTransferFrom jumpi

    dup1 __FUNC_SIG(name)                       eq name jumpi
    dup1 __FUNC_SIG(symbol)                     eq symbol jumpi
    dup1 __FUNC_SIG(tokenURI)                   eq tokenURI jumpi
    dup1 __FUNC_SIG(supportsInterface)          eq supportsInterface jumpi

    dup1 __FUNC_SIG(getApproved)                eq getApproved jumpi
    dup1 __FUNC_SIG(isApprovedForAll)           eq isApprovedForAll jumpi

    dup1 __FUNC_SIG(balanceOf)                  eq balanceOf jumpi
    dup1 __FUNC_SIG(ownerOf)                    eq ownerOf jumpi

    dup1 __FUNC_SIG("safeTransferFrom(address,address,uint256,bytes)") eq safeTransferFromData jumpi

    // Revert on failed dispatch
    0x00 dup1 revert

    mint_jump:
        MINT()

    approve:
        APPROVE()
    setApprovalForAll:
        SET_APPROVAL_FOR_ALL()

    transferFrom:
        TRANSFER_FROM()
    safeTransferFrom:
        SAFE_TRANSFER_FROM()
    safeTransferFromData:
        SAFE_TRANSFER_FROM_WITH_DATA()

    name:
        NAME()
    symbol:
        SYMBOL()
    tokenURI:
        TOKEN_URI()
    supportsInterface:
        SUPPORTS_INTERFACE()

    getApproved:
        GET_APPROVED()
    isApprovedForAll:
        IS_APPROVED_FOR_ALL()

    balanceOf:
        BALANCE_OF()
    ownerOf:
        OWNER_OF()
}