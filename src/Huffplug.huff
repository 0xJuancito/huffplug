// SPDX-License-Identifier: MIT

// Huffplugs erc721 contract
// source code: https://github.com/webtresclub/huffplug
// mint on goerli: https://buttplug-homepage.vercel.app/

/*
  ▄▀  ██      ▄▄▄▄▄       ███   ██   ██▄           
▄▀    █ █    █     ▀▄     █  █  █ █  █  █          
█ ▀▄  █▄▄█ ▄  ▀▀▀▀▄       █ ▀ ▄ █▄▄█ █   █         
█   █ █  █  ▀▄▄▄▄▀        █  ▄▀ █  █ █  █          
 ███     █                ███      █ ███▀          
        █                         █                
       ▀                         ▀                 
   ▄   ▄████     ▄▄▄▄▀       ▄▀  ████▄ ████▄ ██▄   
    █  █▀   ▀ ▀▀▀ █        ▄▀    █   █ █   █ █  █  
██   █ █▀▀        █        █ ▀▄  █   █ █   █ █   █ 
█ █  █ █         █         █   █ ▀████ ▀████ █  █  
█  █ █  █       ▀           ███              ███▀  
█   ██   ▀                                         
                    UwU                                  
*/


#include "./Plugger.huff"

#include "huffmate/tokens/ERC721.huff"

// @dev this is for import the macro STATICCALL()
#include "huffmate/utils/Calls.huff"
// @dev this is for import the macro REQUIRE()
#include "huffmate/utils/Errors.huff"

// @dev Usage LOG_STACK_1(0x00), LOG_STACK_2(0x00), ..., etc
// #include "Huff-Console/Console.huff"


// *************************************************************
// ***                    Constants                          ***
// *************************************************************

// @dev This is the address of the contract that will render the tokenURI
#define constant TOKEN_RENDERER = 0x00


// *************************************************************
// ***                    Interfaces                         ***
// *************************************************************

#define function mint(uint256) nonpayable returns ()
#define function mintWithMerkle(bytes32[]) nonpayable returns ()
#define function claimed(address) view returns (bool)
#define function totalSupply() view returns (uint256)
#define function currentDifficulty() view returns (uint256)
#define function totalMinted() view returns (uint256)
#define function salt() view returns (bytes32)
#define function contractURI() view returns (string)
#define function owner() view returns (address)

// *************************************************************
// ***                      Macros                           ***
// *************************************************************

#define macro TOTAL_MINTED() = takes (0) returns (0) {
    [MINTED_STORAGE_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro TOTAL_SUPPLY() = takes (0) returns (0) {
    [MAX_SUPPLY] 0x00 mstore
    0x20 0x00 return
}

#define macro NAME() = takes (0) {
    __RIGHTPAD(0x42757474706c75676779) // Buttpluggy
    0x0a
    0x20 0x00 mstore                            // [name_length, name_value]
    0x20 mstore                                 // [name_value]
    0x40 mstore                                 // []
    0x60 0x00 return
}

#define macro DELEGATE_TOKENRENDERER() = takes (0) {
    // tokenURI SIG + token id
    0x24 0x00 0x00 calldatacopy

    // STATICCALL(ret_size,ret_offset,arg_size,arg_offset,to,maxgas)
    STATICCALL(0x00,0x00,0x24,0x00,TOKEN_RENDERER,gas)

    // Revert if call is unsuccessful
    cont jumpi
    0x00 0x00 revert
    cont:

    returndatasize 0x00 0x00 returndatacopy
    // Load the result
    returndatasize 0x00 return
}

#define macro SYMBOL() = takes (0) {
    __RIGHTPAD(0x557755) // UwU
    0x03
    0x20 0x00 mstore                            // [symbol_length, symbol_value]
    0x20 mstore                                 // [symbol_value]
    0x40 mstore                                 // []
    0x60 0x00 return
}

// *************************************************************
// ***                   Constructor                         ***
// *************************************************************

#define macro CONSTRUCTOR() = takes (0) returns (0) {
    CONSTRUCTOR_PLUGGER()

    // this will setup the immutable and return de code with the immutable
    VERGA_CONSTRUCTOR()
}


// *************************************************************
// ***               Function dispatcher                     ***
// *************************************************************

#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr  // [sig]

    NON_PAYABLE()                               // []

    dup1 __FUNC_SIG(mint)                       eq mint jumpi
    dup1 __FUNC_SIG(mintWithMerkle)             eq mintWithMerkle jumpi

    dup1 __FUNC_SIG(approve)                    eq approve jumpi
    dup1 __FUNC_SIG(setApprovalForAll)          eq setApprovalForAll jumpi

    dup1 __FUNC_SIG(transferFrom)               eq transferFrom jumpi
    dup1 __FUNC_SIG(safeTransferFrom)           eq safeTransferFrom jumpi

    dup1 __FUNC_SIG(name)                       eq name jumpi
    dup1 __FUNC_SIG(symbol)                     eq symbol jumpi
    dup1 __FUNC_SIG(supportsInterface)          eq supportsInterface jumpi
    
    /// @dev this functions are delegate to the TokenRenderer
    dup1 __FUNC_SIG(tokenURI)                   eq delegateTokenRenderer jumpi
    dup1 __FUNC_SIG(contractURI)                eq delegateTokenRenderer jumpi
    dup1 __FUNC_SIG(owner)                      eq delegateTokenRenderer jumpi

    dup1 __FUNC_SIG(getApproved)                eq getApproved jumpi
    dup1 __FUNC_SIG(isApprovedForAll)           eq isApprovedForAll jumpi

    dup1 __FUNC_SIG(balanceOf)                  eq balanceOf jumpi
    dup1 __FUNC_SIG(ownerOf)                    eq ownerOf jumpi

    dup1 __FUNC_SIG("safeTransferFrom(address,address,uint256,bytes)") eq safeTransferFromData jumpi

    dup1 __FUNC_SIG(totalSupply)                eq totalSupply jumpi
    dup1 __FUNC_SIG(totalMinted)                eq totalMinted jumpi

    dup1 __FUNC_SIG(claimed)                    eq claimed jumpi    
    dup1 __FUNC_SIG(salt)                       eq salt jumpi
    // last one doesnt need dup1
    __FUNC_SIG(currentDifficulty)          eq currentDifficulty jumpi


    // Revert on failed dispatch
    invalid

    totalSupply:
        TOTAL_SUPPLY()

    totalMinted:
        TOTAL_MINTED()

    mint:
        MINT()
    
    mintWithMerkle:
        MINT_WITH_MERKLE()

    currentDifficulty:
        // imported from Plugger.huff
        GET_DIFFICULTY()
    
    salt:
        // imported from Plugger.huff
        GET_SALT()
    
    claimed:
        // imported from Plugger.huff
        GET_CLAIMED()

    approve:
        APPROVE()
    setApprovalForAll:
        SET_APPROVAL_FOR_ALL()

    transferFrom:
        TRANSFER_FROM()
    safeTransferFrom:
        SAFE_TRANSFER_FROM()
    safeTransferFromData:
        SAFE_TRANSFER_FROM_WITH_DATA()

    name:
        NAME()
    symbol:
        SYMBOL()
    delegateTokenRenderer:
        DELEGATE_TOKENRENDERER()
    supportsInterface:
        SUPPORTS_INTERFACE()

    getApproved:
        GET_APPROVED()
    isApprovedForAll:
        IS_APPROVED_FOR_ALL()

    balanceOf:
        BALANCE_OF()
    ownerOf:
        OWNER_OF()
}