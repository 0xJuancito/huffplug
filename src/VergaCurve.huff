// Verga curve macros for the Huffplugs
// source code: https://github.com/webtresclub/huffplug
// mint on goerli: https://buttplug-homepage.vercel.app/

// *************************************************************
// ***                    Constants                          ***
// *************************************************************

/// @dev The difficulty is the number of 0s that the hash of the address and the nonce must have
///      5 means 0x00000, im expecting to take a few secs to find a nonce
#define constant DEFAULT_DIFFICULTY = 0x05
#define constant MAX_DIFFICULTY     = 0x20
#define constant ONE_DAY            = 0x015180 // 1 day = 86400 = 0x015180

// *************************************************************
// ***                      Storage                          ***
// *************************************************************

/// @dev The timestamp when the collection started, useful to calculate the difficulty
#define constant COLLECTION_START_SLOT = FREE_STORAGE_POINTER()

// *************************************************************
// ***                   Constructor                         ***
// *************************************************************

#define macro VERGA_CONSTRUCTOR() = takes (0) returns (0) {
  timestamp [COLLECTION_START_SLOT] sstore
}

// *************************************************************
// ***                      Macros                           ***
// *************************************************************

/// @dev Returns the current difficulty, calculated using VERGA curve
///      The difficulty is calculated using the following formula:
///      difficulty = sqrt(totalMinted - delta) + 5
///      where delta is the number of Buttplug minted for today (1UwU per day)
///      and totalMinted is the number of Buttplug (UwU) that have been minted
#define macro CURRENT_DIFFICULTY() = takes (1) returns (2) {
  // init state = [totalMinted]

  dup1                                              // [totalMinted, totalMinted]

  /// @dev We expect to mint 1 Buttplug (UwU) per day
  // uint256 delta = (block.timestamp - COLLECTION_START) / 1 days;
  [ONE_DAY]                                         // [ONE_DAY, totalMinted, totalMinted]
  [COLLECTION_START_SLOT] sload timestamp           // [timestamp, COLLECTION_START, ONE_DAY, totalMinted, totalMinted]
  sub                                               // [timestamp - COLLECTION_START, ONE_DAY, totalMinted, totalMinted]
  div                                               // [(timestamp - COLLECTION_START) / ONE_DAY, totalMinted, totalMinted]

  swap1                                              // [totalMinted, DELTA, totalMinted]
  dup2                                               // [DELTA, totalMinted, DELTA, totalMinted]
  swap1                                              // [totalMinted, DELTA, DELTA, totalMinted]

  /// @dev If we have minted less than we supposed to difficulty is DEFAULT_DIFFICULTY
  gt                                                 // [totalMinted > DELTA, DELTA, totalMinted]
  iszero returnDefault jumpi                         // [DELTA, totalMinted]

  dup2                                               // [totalMinted, DELTA, totalMinted]
  sub                                                // [totalMinted - DELTA, totalMinted]

  SQRT() [DEFAULT_DIFFICULTY] add                    // [calculateDifficulty, totalMinted]

  // if (difficulty > MAX_DIFFICULTY) return MAX_DIFFICULTY;
  [MAX_DIFFICULTY]                                   // [MAX_DIFFICULTY, calculateDifficulty, totalMinted]
  dup2 gt returnMaxDefault jumpi                     // [calculateDifficulty, totalMinted]

  // return difficulty;
  endF jump

  returnDefault:
    pop                                              // [totalMinted]
    [DEFAULT_DIFFICULTY]                             // [DEFAULT_DIFFICULTY, totalMinted]
    endF jump
  returnMaxDefault:
    pop                                              // [totalMinted]
    [MAX_DIFFICULTY]                                 // [MAX_DIFFICULTY, totalMinted]

  endF:
}
