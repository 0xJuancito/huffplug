// Minter contract for the Huffplugs
// source code: https://github.com/webtresclub/huffplug
// mint on goerli: https://buttplug-homepage.vercel.app/

#include "huffmate/math/Math.huff"
#include "huffmate/tokens/ERC721.huff"

// @dev Usage LOG_STACK_1(0x00), LOG_STACK_2(0x00), ..., etc
// #include "Huff-Console/Console.huff"

#include "huffmate/utils/MerkleProofLib.huff"

// @dev this is for import the macro REQUIRE()
#include "huffmate/utils/Errors.huff"

#include "./VergaCurve.huff"

// *************************************************************
// ***                    Constants                          ***
// *************************************************************

/// @dev The maximum number of Buttplug (UwU) that can be minted
#define constant MAX_SUPPLY         = 0x0400

/// @dev The merkle root of the merkle tree that contains the proofs of the users that can claim their Buttplug (UwU)
#define constant MERKLE_ROOT        = 0x00

// *************************************************************
// ***                      Errors                           ***
// *************************************************************

#define error ErrAlreadyClaimed()

// *************************************************************
// ***                      Storage                          ***
// *************************************************************

/// @dev The number of Buttplug (UwU) that have been minted, useful to calculate the difficulty
#define constant MINTED_STORAGE_SLOT = 0x0420

/// @dev The salt used to generate the pseudo random number for the minting
#define constant SALT_STORAGE_SLOT   = 0x031337

// *************************************************************
// ***                   Constructor                         ***
// *************************************************************

#define macro PLUGGER_CONSTRUCTOR() = takes(0) returns(0) {
    number 0x00 not add
    blockhash       // [blockhash(block.number - 1)]
    [SALT_STORAGE_SLOT] sstore      // []
}

// *************************************************************
// ***                      Macros                           ***
// *************************************************************

#define macro REQUIRE_CUSTOM_ERROR() = takes(2) returns(0) {
    // [condition, customErrorSig]
    do_not_throwErr jumpi
    0x00 mstore
    0x04 0x00 revert

    do_not_throwErr:
    pop
}


/// @dev Macro defined for
/// function salt() external view returns (bytes32)
#define macro GET_SALT() = takes(0) returns(0) {
    [SALT_STORAGE_SLOT] sload       // [SALT]
    0x00 mstore                     // []
    0x20 0x00 return                // []
}

/// @dev Macro defined for
/// function claimed(address user) external view returns (bool)
#define macro GET_CLAIMED() = takes(0) returns(0) {
    0x04 calldataload sload         // [USER_CLAIMED? (0 or 1)]
    0x00 mstore                     // []
    0x20 0x00 return                // []
}

/// @dev Macro defined for
/// function currentDifficulty() external view returns (uint256)
#define macro GET_DIFFICULTY() = takes(0) returns(0) {
    [MINTED_STORAGE_SLOT] sload     // [TOTAL_MINTED]
    CURRENT_DIFFICULTY()            // [DIFFICULTY, TOTAL_MINTED]
    0x00 mstore                     // [TOTAL_MINTED]
    0x20 0x00 return                // [TOTAL_MINTED]
}

#define macro REQUIRE_NOT_CLAIMED() = takes (0) returns (0) {
    __ERROR(ErrAlreadyClaimed)       // [ErrAlreadyClaimedSig]
    caller sload iszero                                // [CLAIMED(caller) == 0, (length=15), "ALREADY_CLAIMED"]
    REQUIRE_CUSTOM_ERROR()                                          // []
}

#define macro REQUIRE_VALID_PROOF(PROOF_CD_POINTER) = takes (0) returns (0) {
    __RIGHTPAD(0x494e56414c49442050524f4f46)       // ["INVALID PROOF"]
    0x0d                                           // [(length=13), "INVALID PROOF"]

    [MERKLE_ROOT]                                  // [root, (length=13), "INVALID PROOF"]
    caller                                         // [leaf, root, (length=13), "INVALID PROOF"]
    <PROOF_CD_POINTER>                             // [PROOF_CD_POINTER, leaf, root, (length=13), "INVALID PROOF"]
    VERIFY_PROOF()                                 // [is_valid, (length=13), "INVALID PROOF"]
    REQUIRE()                                      // []
}

#define macro REQUIRE_MINT_LIMIT() = takes(1) returns(1) {
    // input state is [totalMinted]
    __RIGHTPAD(0x4e6f206d6f726520557755)     // ["No more UwU", totalMinted]
    0x0b                                     // [(length=11), "No more UwU", totalMinted]
    dup3 [MAX_SUPPLY] gt                     // [MAX_SUPPLY > totalMinted, (length=11), "No more UwU", totalMinted]
    REQUIRE()                                // []
}

/// @notice Mint a Buttplug (UwU) using a merkle proof
/// @param proofs The merkle proofs of the user
/// @dev Users with at least two poap of the community can mint a Buttplug (UwU) using a merkle proof
/// function mintWithMerkle(bytes32[] memory) external
#define macro MINT_WITH_MERKLE() = takes (0) returns (0) {
    REQUIRE_NOT_CLAIMED()                        // []
    // 0x24 is the calldata offset to the merkle proof
    REQUIRE_VALID_PROOF(0x24)                    // []

    [MINTED_STORAGE_SLOT] sload                  // [totalMinted]
    REQUIRE_MINT_LIMIT()                         // [totalMinted]

    0x01                                         // [0x01, totalMinted]
    // set user as claim (claimed(caller) = 1)
    dup1 caller sstore                           // [0x01, totalMinted]

    // increase total minted
    add                                          // [newTotalMinted]
    // update storage with newTotalMinted
    dup1 [MINTED_STORAGE_SLOT] sstore            // [newTotalMinted]

    // this number is the pseudo random
    caller add                                   // [(PSEUDO_RANDOM=newTotalMinted+caller)]
    [MAX_SUPPLY]                                 // [MAX_SUPPLY, PSEUDO_RANDOM]

    // Calculate pseudorandom % 1024 + 1
    // 0 <= pseudorandom % 1024 <= 1023 ==> 1 <= pseudorandom % 1024 + 1 <= 1024
    swap1 mod                                    // [PSEUDO_RANDOM % MAX_SUPPLY]
    0x01 add                                     // [(PSEUDO_RANDOM % MAX_SUPPLY) + 1=nftId]

    caller                                       // [msg.sender, nftId]

    // mint(msg.sender, uint256(random) % 1024 + 1);
    _MINT()                                      // []

    stop
}

/// @notice Mint a Buttplug (UwU) using a pseudo random number
/// @param nonce The nonce used to generate the pseudo random number
/// function mint(uint256 nonce) external;
#define macro MINT() = takes(0) returns(0) {
    0x01

    [MINTED_STORAGE_SLOT] sload           // [totalMinted, 0x01]

    REQUIRE_MINT_LIMIT()                  // [totalMinted, 0x01]

    // pseudo random number
    //    bytes32 random = keccak256(abi.encodePacked(msg.sender, salt, nonce));
    caller                                // [caller, totalMinted, 0x01]                mem = []
    0x00 mstore                           // [totalMinted, 0x01]                        mem = [caller]
    [SALT_STORAGE_SLOT] sload             // [salt, totalMinted, 0x01]                  mem = [caller]
    0x20 mstore                           // [totalMinted, 0x01]                        mem = [caller, salt]
    0x04 calldataload                     // [nonce, totalMinted, 0x01]                 mem = [caller, salt]
    0x40 mstore                           // [totalMinted, 0x01]                        mem = [caller, salt, nonce]
    
    // @dev use 0x0c skip empty bytes from caller address, and emulate abi.encodePacked(msg.sender, salt, nonce)
    0x54 0x0c sha3                        // [random, totalMinted, 0x01]

    swap1                                 // [totalMinted, random, 0x01]

    CURRENT_DIFFICULTY()                  // [difficulty, totalMinted, random, 0x01]
    0x02 shl                              // [difficulty * 4, totalMinted, random, 0x01]

    0x0100 sub                            // [256 - (difficulty * 4), totalMinted, random, 0x01]

    dup3                                  // [random, 256 - (difficulty * 4), totalMinted, random, 0x01]
    swap1                                 // [256 - (difficulty * 4), random, totalMinted, random, 0x01]

    // shift random by (256 - (difficulty * 4)) bits
    // 000...00XXX...XXX >> (256 - difficulty in bits)
    // 0000000.00XXX..XX
    shr                                   // [shiftedRandom, totalMinted, random, 0x01]

    __RIGHTPAD(0x57524f4e475f53414c54)    // ["WRONG_SALT", shiftedRandom, totalMinted, random, 0x01]
    0x0a                                  // [10 (length), "WRONG_SALT", shiftedRandom, totalMinted, random, 0x01]
    dup3 iszero                           // [shiftedRandom == 0, 10 (length), "WRONG_SALT", shiftedRandom, totalMinted, random, 0x01]
    REQUIRE()                             // [shiftedRandom, totalMinted, random, 0x01]
    pop                                   // [totalMinted, random, 0x01]

    // minted = _minted + 1;
    dup3 add                              // [totalMinted + 1, random, 0x01]
    [MINTED_STORAGE_SLOT] sstore          // [random, 0x01]

    // update salt
    // salt = blockhash(block.number - 1);
    dup3 number sub blockhash             // [blockhash(block.number - 1), random, 0x01]
    [SALT_STORAGE_SLOT] sstore            // [random, 0x01]

    [MAX_SUPPLY] swap1                    // [random, MAX_SUPPLY, 0x01]
    mod add                          // [random) % MAX_SUPPLY + 1 = nftId]

    caller                                // [msg.sender, nftId]

    // mint(msg.sender, uint256(random) % 1024 + 1);
    _MINT()                               // []

    stop
}
