/// @title Owned
/// @notice SPDX-License-Identifier: MIT
/// @author asnared <https://github.com/abigger87>
/// @notice An single owner authorization module
/// @notice Adapted from <https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol>

// Interface
#define function setOwner(address) nonpayable returns ()
#define function owner() view returns (address)

// Errors
#define error ErrOnlyOwner()
#define constant ERR_ONLYOWNER = 0x4eebc1aa // same as bytes4(keccak256("ErrOnlyOwner()"))

// CONSTRUCTOR
#define macro OWNED_CONSTRUCTOR() = takes (0) returns (0) {
  // Copy the owner into memory
  0x20                        // [size] - byte size to copy
  dup1 codesize sub           // [offset, size] - offset in the code to copy from
  0x00                        // [mem, offset, size] - offset in memory to copy to
  codecopy                    // []

  // Set the new owner
  0x00 mload                  // [owner]
  [OWNER_SLOT]                // [OWNER, owner]
  sstore                      // []
}


/// @notice Only Owner Modifier
#define macro IS_OWNER() = takes (0) returns (0) {
  caller                      // [msg.sender]
  [OWNER_SLOT] sload          // [owner, msg.sender]
  eq authed jumpi             // [authed]

  // Revert otherwise
  [ERR_ONLYOWNER]
  ERR_CUSTOM()

  authed:
}

/// @notice Set the Owner
/// @param {owner} [address] - The new owner
#define macro SET_OWNER() = takes (0) returns (0) {
  // Set the new owner
  0x04 calldataload           // [newOwner]
  [OWNER_SLOT] sstore         // []

  stop
}

/// @notice Get the owner of the contract
/// @return {owner} [address] - The owner of the contract
#define macro OWNER() = takes (0) returns (0) {
  [OWNER_SLOT] sload         // [owner]
  0x00 mstore                // []
  0x20 0x00 return
}
