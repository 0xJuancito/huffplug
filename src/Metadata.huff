#include "./Slots.huff"
#include "huffmate/auth/Owned.huff"

// @dev Usage LOG_STACK_1(0x00), LOG_STACK_2(0x00), ..., etc
#include "Huff-Console/Console.huff"

#define error ErrInvalidToken()
#define constant ERR_INVALIDTOKEN = 0x0873c1d0

// *************************************************************
// ***                      Macros                           ***
// *************************************************************

#define macro VALIDATE_TOKEN_ID() = takes (1) returns (0) {
    0x00 not add // tokeniId-1
    [MAX_SUPPLY] // max supply, tokeniId-1
    gt           // max supply > tokeniId-1
    REQUIRE_CUSTOM_ERROR_LONG(ERR_INVALIDTOKEN)
}

// @dev This macro is used to set a string in memory
//      the max length supported is 96 characters
#define macro SET_STRING(POINTER) = takes(0) returns (0) {
    0x20
    <POINTER>

    0x24 calldataload   // length, [POINTER]
    dup2                // [POINTER], length, [POINTER]
    sstore              // [POINTER]

    dup2 add            // [POINTER + 0x20]

    0x44 calldataload   // str(0), [POINTER + 0x20]
    dup2                // [POINTER+0x20], str(0), [POINTER + 0x20]
    sstore              // [POINTER + 0x20]

    dup2 add            // [POINTER + 0x20 + 0x20]

    0x64 calldataload   // str(1), [POINTER+0x60]
    dup2                // [POINTER+0x60], str(1), [POINTER]
    sstore              // [POINTER]

    dup2 add            // [POINTER + 0x20 + 0x20]

    0x84 calldataload   // str(2), [POINTER]
    dup2                // [POINTER+0x60], [POINTER]
    sstore              // [POINTER]

    stop
}

#define macro TOKEN_URI_METADATA() = takes (0) returns (0) {
    0x20
    [URI_POINTER]

    dup2 0x00 mstore     // URI_POINTER, 0x20
                         // MEM: [0x00:0x20]
        
    dup1 sload           // LEN,URI_POINTER, 0x20

    // 4 == len("XXXX") where XXXX is the id
    0x04 add            // LEN+4, URI_POINTER, 0x20

    dup1                // LEN+4, LEN+4, URI_POINTER, 0x20
    dup4                // 0x20, LEN+4, LEN+4, URI_POINTER, 0x20
    mstore              // LEN+4, URI_POINTER, 0x20
                        // MEM: [0x00:0x20, 0x20:LEN+4]
    0x40 add

    swap2               // 0x20, URI_POINTER, LEN+4
    dup2                // URI_POINTER, 0x20, URI_POINTER, LEN+4
    
    dup2                // 0x20, URI_POINTER, 0x20, URI_POINTER, LEN+4
    add                 // URI_POINTER+0x20, 0x20, URI_POINTER, LEN+4
    dup1 sload          // str(0), URI_POINTER+0x20, 0x20, URI_POINTER, LEN+4
    0x40 mstore         // URI_POINTER+0x20, 0x20, URI_POINTER, LEN+4
                        // MEM: [0x00:0x20, 0x20:LEN+4, 0x40:str(0)]

                         // URI_POINTER+0x20, 0x20, URI_POINTER, LEN+4

    dup2                 // 0x20, URI_POINTER+0x20, 0x20, URI_POINTER, LEN+4
    add                  // URI_POINTER+0x40, 0x20, URI_POINTER, LEN+4
    dup1 sload           // URI_POINTER+0x40, 0x20, URI_POINTER, LEN+4
    0x60 mstore

    dup2                 // 0x20, URI_POINTER+0x20, 0x20, URI_POINTER, LEN+4
    add                  // URI_POINTER+0x40, 0x20, URI_POINTER, LEN+4
    sload                // URI_POINTER+0x40, 0x20, URI_POINTER, LEN+4
    0x80 mstore

    // URI_POINTER+0x40, 0x20, URI_POINTER, LEN+4
    swap2  // URI_POINTER+0x20, 0x20, URI_POINTER, LEN+4
    0x04 // counter
    swap1
    0x00 not add
    0x30  // 48, mempos, counter=4
    0x04 calldataload // number, 48, mempos, counter
    dup1 VALIDATE_TOKEN_ID()
    0x0a  // 10, number, 48, mempos, counter

    start:

    dup1  // 10, 10, number, 48, mempos, counter

    dup3  // number, 10, 10, number, 48, mempos
    mod   // mod, 10, number, 48, mempos
    dup4 add // mod + 48, 10, number, 48, mempos
    dup5     // mempos, mod + 48, 10, number, 48,mempos

    mstore8 // 10, number, 48,mempos
    // 10, number, 48,mempos
    
    dup1    // 10, 10, number, 48,mempos
    swap2   // number, 10, 10, 48,mempos

    div     // number / 10, 10, 48,mempos
    dup4    // mempos, number / 10, 10, 48, mempos
    0x00 not add // mempos-1, number, 10, 48, mempos

    swap4             // mempos, number, 10, 48, mempos-1
    pop               // number, 10, 48, mempos-1

    swap1             // 10, number, 48, mempos-1
    
    dup5 
    
    0x00 not add
   
    swap5
    pop
    
    dup5 iszero end jumpi
    start jump
    
    end:
    
    0xa0 0x00 return
}

#define macro CONTRACT_URI_METADATA() = takes (0) returns (0) {
    0x20
    [CONTRACTURI_POINTER]

    RETURN_STRING()
}



#define macro GET_URI() = takes (0) returns (0) {
    0x20
    [URI_POINTER]

    RETURN_STRING()
}

#define macro RETURN_STRING() = takes(0) returns (0) {
    // URI_POINTER, 0x20

    dup2 0x00 mstore     // URI_POINTER, 0x20
                         // MEM: [0x00:0x20]
    
    dup1 sload           // LEN, URI_POINTER, 0x20
    dup3 mstore          // URI_POINTER, 0x20
                         // MEM: [0x00:0x20, 0x20:LEN]

                            // URI_POINTER, 0x20
    
    dup2 add             // URI_POINTER+0x20, 0x20

    dup1 sload           // str(0), URI_POINTER+0x20, 0x20

    0x40 mstore          // URI_POINTER+0x20, 0x20
                         // MEM: [0x00:0x20, 0x20:LEN, 0x40:str(0)]

                         // URI_POINTER+0x20, 0x20

    dup1 dup3 add sload
    0x60 mstore

    dup1 0x40 add sload
    0x80 mstore
    
    0xa0 0x00 return
}